project (GLoops)
cmake_minimum_required(VERSION 3.1)

# EXTLIBS
set(GLOOPS_EXTLIBS_PATH "${CMAKE_CURRENT_SOURCE_DIR}/extlibs/")

### STB
set(STB_PATH "${GLOOPS_EXTLIBS_PATH}/stb/")

### TINY OBJ LOADER
set(TINY_OBJ_PATH "${GLOOPS_EXTLIBS_PATH}/tinyobjloader/")

### EIGEN
set(GLOOPS_EIGEN_PATH "${GLOOPS_EXTLIBS_PATH}/eigen/")

### GLFW
set(GLOOPS_GLFW_PATH "${GLOOPS_EXTLIBS_PATH}/glfw/")
set(GLOOPS_GLFW_INCLUDE "${GLOOPS_GLFW_PATH}/include/")
set(GLFW_BUILD_DOCS OFF CACHE BOOL "")
set(GLFW_BUILD_TESTS OFF CACHE BOOL "")
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "")
set(GLFW_INSTALL OFF CACHE BOOL "")
set(GLFW_DOCUMENT_INTERNALS OFF CACHE BOOL "")
add_subdirectory(${GLOOPS_GLFW_PATH})

### GLAD
set(GLOOPS_GLAD_INCLUDE "${GLOOPS_EXTLIBS_PATH}/glad/include/")
set(GLOOPS_GLAD_SRC "${GLOOPS_EXTLIBS_PATH}/glad/src/glad.c")

### IMGUI
set(GLOOPS_IMGUI_PATH "${GLOOPS_EXTLIBS_PATH}/imgui/")
file(GLOB GLOOPS_IMGUI_HEADERS "${GLOOPS_IMGUI_PATH}/*.h"
	"${GLOOPS_IMGUI_PATH}/examples/imgui_impl_glfw.h"
	"${GLOOPS_IMGUI_PATH}/examples/imgui_impl_opengl3.h")
file(GLOB GLOOPS_IMGUI_SRC "${GLOOPS_IMGUI_PATH}/*.cpp"
	"${GLOOPS_IMGUI_PATH}/examples/imgui_impl_glfw.cpp"
	"${GLOOPS_IMGUI_PATH}/examples/imgui_impl_opengl3.cpp")
set(GLOOPS_IMGUI_INCLUDE ${GLOOPS_IMGUI_PATH})

# GLOOPS INTERNAL GL LIBRARY
add_library(GLoops_GL STATIC 
	${GLOOPS_GLAD_SRC} ${GLOOPS_IMGUI_SRC} ${GLOOPS_IMGUI_HEADERS} 
)

target_include_directories(GLoops_GL PUBLIC
	${CMAKE_CURRENT_SOURCE_DIR} ${GLOOPS_GLAD_INCLUDE} ${GLOOPS_IMGUI_PATH} ${GLOOPS_GLFW_INCLUDE}
)

target_compile_definitions(GLoops_GL PRIVATE IMGUI_USER_CONFIG=<gloops/config_imgui.hpp>)
	
target_link_libraries(GLoops_GL PUBLIC
	glfw
)

### EMBREE 
set(GLOOPS_EMBREE_PATH "${GLOOPS_EXTLIBS_PATH}/embree/")
set(EMBREE_STATIC_LIB ON CACHE BOOL "")
set(EMBREE_BACKFACE_CULLING ON CACHE BOOL "")
set(EMBREE_TASKING_SYSTEM CACHE STRING "INTERNAL")
set(EMBREE_ISPC_SUPPORT OFF CACHE BOOL "")
set(EMBREE_TUTORIALS OFF CACHE BOOL "")
set(EMBREE_FILTER_FUNCTION OFF CACHE BOOL "")
set(EMBREE_GEOMETRY_CURVE OFF CACHE BOOL "")
set(EMBREE_GEOMETRY_GRID OFF CACHE BOOL "")
set(EMBREE_GEOMETRY_POINT OFF CACHE BOOL "")
set(EMBREE_GEOMETRY_QUAD OFF CACHE BOOL "")
set(EMBREE_GEOMETRY_SUBDIVISION OFF CACHE BOOL "")
add_subdirectory(${GLOOPS_EMBREE_PATH})
set(GLOOPS_EMBREE_INCLUDE "${GLOOPS_EMBREE_PATH}/include/")

### ASSIMP
#set(GLOOPS_ASSIMP_PATH "${GLOOPS_EXTLIBS_PATH}/assimp/")
#set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "")
#set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "")
#set(ASSIMP_INSTALL OFF CACHE BOOL "")
#set(ASSIMP_INSTALL_PDB OFF CACHE BOOL "")
#add_subdirectory(${GLOOPS_ASSIMP_PATH})

# GLOOPS SETUP
set(GLOOPS_SRC_PATH "${CMAKE_CURRENT_SOURCE_DIR}/gloops/")
set(GLOOPS_SHADERS_PATH "${GLOOPS_SRC_PATH}/shaders/")
file(GLOB GLOOPS_HEADERS "${GLOOPS_SRC_PATH}*.hpp")
file(GLOB GLOOPS_SRC "${GLOOPS_SRC_PATH}*.cpp" )
file(GLOB GLOOPS_SHADERS "${GLOOPS_SHADERS_PATH}/*.*")

option(GLOOPS_STATIC "Build GLoops as static library, will be shared otherwise" ON)

if(GLOOPS_STATIC)
	add_library(GLoops STATIC ${GLOOPS_SRC} ${GLOOPS_HEADERS} )
else()
	add_library(GLoops SHARED ${GLOOPS_SRC} ${GLOOPS_HEADERS} )
endif()

target_include_directories(GLoops PUBLIC . 
	${GLOOPS_EMBREE_INCLUDE} ${GLOOPS_EIGEN_PATH} ${STB_PATH} ${TINY_OBJ_PATH}
)

target_compile_definitions(GLoops PUBLIC GLOOPS_SHADERS_PATH="${GLOOPS_SHADERS_PATH}")

target_link_libraries(GLoops PUBLIC
        GLoops_GL
		embree
)